AWSTemplateFormatVersion: '2010-09-09'
Transform:
  - AWS::Serverless-2016-10-31
Description: AWS API Gateway with a Lambda Integration

Parameters:
  Environment:
    Description: Base segmentation of stack.
    Default: test
    Type: String
    AllowedValues:
      - test
      - prod


Resources:
  PhotoS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "bazar-photos-${Environment}"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
            AllowedOrigins:
              - '*'
            ExposedHeaders:
              - Date
            Id: myCORSRuleId1
            MaxAge: '3600'


  ApiGatewayAdvertisementRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: An API Gateway with a Lambda Integration
      Body:
        swagger: 2.0
        info:
          version: 0.0.1
          title: API
        basePath: /api
        schemes:
          - "https"
          - "http"
        paths:
          /advertisement:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: AWS_PROXY
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerApp.Arn}/invocations'
                requestTemplates:
                  application/json: $input.body
              tags:
                - "advertisement"
              description: "CRUD for advertisement"
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                '200' :
                  description: resource
                  schema:
                    type : object
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: AWS_PROXY
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerApp.Arn}/invocations'
                requestTemplates:
                  application/json: $input.body
              tags:
                - "advertisement"
              description: "CRUD for advertisement"
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                '200':
                  description: resource
                  schema:
                    type: object
          /advertisement/analytics:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: AWS_PROXY
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerApp.Arn}/invocations'
                requestTemplates:
                  application/json: $input.body
              tags:
                - "advertisement"
              description: "CRUD for advertisement"
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                '200':
                  description: resource
                  schema:
                    type: object
          /advertisement/{id}:
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: AWS_PROXY
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerApp.Arn}/invocations'
                requestTemplates:
                  application/json: $input.body
              tags:
                - "advertisement"
              description: "CRUD for advertisement"
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                '200':
                  description: resource
                  schema:
                    type: object
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: AWS_PROXY
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerApp.Arn}/invocations'
                requestTemplates:
                  application/json: $input.body
              tags:
                - "advertisement"
              description: "CRUD for advertisement"
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                '200':
                  description: resource
                  schema:
                    type: object
          /store-items:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: AWS_PROXY
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerApp.Arn}/invocations'
                requestTemplates:
                  application/json: $input.body
              tags:
                - "advertisement"
              description: "CRUD for store item"
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                '200':
                  description: resource
                  schema:
                    type: object
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: AWS_PROXY
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerApp.Arn}/invocations'
                requestTemplates:
                  application/json: $input.body
              tags:
                - "advertisement"
              description: "CRUD for store item"
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                '200':
                  description: resource
                  schema:
                    type: object
          /store-items/{id}:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: AWS_PROXY
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerApp.Arn}/invocations'
                requestTemplates:
                  application/json: $input.body
              tags:
                - "advertisement"
              description: "CRUD for store item"
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                '200':
                  description: resource
                  schema:
                    type: object
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: AWS_PROXY
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerApp.Arn}/invocations'
                requestTemplates:
                  application/json: $input.body
              tags:
                - "advertisement"
              description: "CRUD for store item"
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                '200':
                  description: resource
                  schema:
                    type: object
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: AWS_PROXY
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerApp.Arn}/invocations'
                requestTemplates:
                  application/json: $input.body
              tags:
                - "advertisement"
              description: "CRUD for store item"
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                '200':
                  description: resource
                  schema:
                    type: object
          /store-items/{id}/{subitem}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: AWS_PROXY
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerApp.Arn}/invocations'
                requestTemplates:
                  application/json: $input.body
              tags:
                - "store-items"
                - "subitem"
              description: "CRUD for store item"
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                '200':
                  description: resource
                  schema:
                    type: object

      EndpointConfiguration:
        Types:
          - EDGE
      Name: bazar-api

  WebGatewayAdvertisementRestApi:
    Type: AWS::ApiGateway::RestApi
    DependsOn:
      - BazaarServerWeb
    Properties:
      ApiKeySourceType: HEADER
      Description: An API Gateway with a Lambda Integration
      Body:
        swagger: 2.0
        info:
          version: 0.0.1
          title: Web
        basePath: /web
        schemes:
          - "https"
          - "http"
        paths:
          /web:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: aws
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerWeb.Arn}/invocations'
                requestTemplates:
                  application/json: |
                    ##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
                    ##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload
                    #set($allParams = $input.params())
                    {
                    "body-json" : $input.json('$'),
                    "body" : $input.json('$'),
                    "params" : {
                    #foreach($type in $allParams.keySet())
                        #set($params = $allParams.get($type))
                    "$type" : {
                        #foreach($paramName in $params.keySet())
                        "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                            #if($foreach.hasNext),#end
                        #end
                    }
                        #if($foreach.hasNext),#end
                    #end
                    },
                    "stage-variables" : {
                    #foreach($key in $stageVariables.keySet())
                    "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                        #if($foreach.hasNext),#end
                    #end
                    },
                    "resource" : "$context.resourcePath",
                    "path" : "$context.resourcePath",
                    "httpMethod" : "$context.httpMethod",
                    "headers" : {},
                    "context" : {
                        "account-id" : "$context.identity.accountId",
                        "api-id" : "$context.apiId",
                        "api-key" : "$context.identity.apiKey",
                        "authorizer-principal-id" : "$context.authorizer.principalId",
                        "caller" : "$context.identity.caller",
                        "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                        "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                        "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                        "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                        "http-method" : "$context.httpMethod",
                        "stage" : "$context.stage",
                        "source-ip" : "$context.identity.sourceIp",
                        "user" : "$context.identity.user",
                        "user-agent" : "$context.identity.userAgent",
                        "user-arn" : "$context.identity.userArn",
                        "request-id" : "$context.requestId",
                        "resource-id" : "$context.resourceId",
                        "resource-path" : "$context.resourcePath"
                        }
                    }
                responses:
                  default:
                    statusCode: 200
                    headers:
                      Access-Control-Allow-Origin:
                        type: string
#                    responseParameters:
#                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      'text/html': |
                        #set($inputRoot = $input.path('$'))
                        $inputRoot.body

              tags:
                - "web-index"
              description: "Index for web"
              produces:
                - "text/html"
              responses:
                '200':
                  description: resource
                  schema:
                    type: object
          /web/{controller}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: aws
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerWeb.Arn}/invocations'
                requestTemplates:
                  application/json: |
                    ##  See http://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-mapping-template-reference.html
                    ##  This template will pass through all parameters including path, querystring, header, stage variables, and context through to the integration endpoint via the body/payload
                    #set($allParams = $input.params())
                    {
                    "body-json" : $input.json('$'),
                    "body" : $input.json('$'),
                    "params" : {
                    #foreach($type in $allParams.keySet())
                        #set($params = $allParams.get($type))
                    "$type" : {
                        #foreach($paramName in $params.keySet())
                        "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                            #if($foreach.hasNext),#end
                        #end
                    }
                        #if($foreach.hasNext),#end
                    #end
                    },
                    "stage-variables" : {
                    #foreach($key in $stageVariables.keySet())
                    "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                        #if($foreach.hasNext),#end
                    #end
                    },
                    "resource" : "$context.resourcePath",
                    "path" : "$context.resourcePath",
                    "httpMethod" : "$context.httpMethod",
                    "headers" : {},
                    "context" : {
                        "account-id" : "$context.identity.accountId",
                        "api-id" : "$context.apiId",
                        "api-key" : "$context.identity.apiKey",
                        "authorizer-principal-id" : "$context.authorizer.principalId",
                        "caller" : "$context.identity.caller",
                        "cognito-authentication-provider" : "$context.identity.cognitoAuthenticationProvider",
                        "cognito-authentication-type" : "$context.identity.cognitoAuthenticationType",
                        "cognito-identity-id" : "$context.identity.cognitoIdentityId",
                        "cognito-identity-pool-id" : "$context.identity.cognitoIdentityPoolId",
                        "http-method" : "$context.httpMethod",
                        "stage" : "$context.stage",
                        "source-ip" : "$context.identity.sourceIp",
                        "user" : "$context.identity.user",
                        "user-agent" : "$context.identity.userAgent",
                        "user-arn" : "$context.identity.userArn",
                        "request-id" : "$context.requestId",
                        "resource-id" : "$context.resourceId",
                        "resource-path" : "$context.resourcePath"
                        }
                    }
                responses:
                  default:
                    statusCode : 200
                    #responseParameters:
                      #method.reponse.header.Access-Control-Allow-Origin: "'*'"
                    responseTemplates:
                      'text/html': |
                          #set($inputRoot = $input.path('$'))
                          $inputRoot.body

              tags:
                - "web-index"
              description: "Index for web"
              produces:
                - "text/html"
              responses:
                '200':
                  description: resource
                  schema:
                    type: object
          /web/{controller}/{view}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: WHEN_NO_MATCH
                type: aws
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerWeb.Arn}/invocations'
                requestTemplates:
                  application/json: |
                    #set($allParams = $input.params())
                    {
                    "body-json" : $input.json('$'),
                    "params" : {
                    #foreach($type in $allParams.keySet())
                        #set($params = $allParams.get($type))
                    "$type" : {
                        #foreach($paramName in $params.keySet())
                        "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                            #if($foreach.hasNext),#end
                        #end
                    }
                        #if($foreach.hasNext),#end
                    #end
                    },
                    "stage-variables" : {
                    #foreach($key in $stageVariables.keySet())
                    "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                        #if($foreach.hasNext),#end
                    #end
                    },
                    "resource" : "$context.resourcePath",
                    "path" : "$context.resourcePath",
                    "httpMethod" : "$context.httpMethod"
                    }
                responses:
                  default:
                    statusCode: 200
                      #responseParameters:
                    #method.response.header.Access-Control-Allow-Origin: "'*'"
                    #method.response.header.Content-Type: "'text/html'"
                    responseTemplates:
                      'text/html': |
                          #set($inputRoot = $input.path('$'))
                          $inputRoot.body

              tags:
                - "web-index"
              description: "Index for web"
              produces:
                - "text/html"
              responses:
                '200':
                  description: resource
                  schema:
                    type: object
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: aws
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerWeb.Arn}/invocations'
                requestTemplates:
                  application/json: |
                    #set($allParams = $input.params())
                    {
                    "body-json" : $input.json('$'),
                    "params" : {
                    #foreach($type in $allParams.keySet())
                        #set($params = $allParams.get($type))
                    "$type" : {
                        #foreach($paramName in $params.keySet())
                        "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                            #if($foreach.hasNext),#end
                        #end
                    }
                        #if($foreach.hasNext),#end
                    #end
                    },
                    "stage-variables" : {
                    #foreach($key in $stageVariables.keySet())
                    "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                        #if($foreach.hasNext),#end
                    #end
                    },
                    "resource" : "$context.resourcePath",
                    "path" : "$context.resourcePath",
                    "httpMethod" : "$context.httpMethod"
                    }
                responses:
                  default:
                    statusCode: 200
                    #responseParameters:
                    #method.response.header.Access-Control-Allow-Origin: "'*'"
                    #method.response.header.Content-Type: "'text/html'"
                    responseTemplates:
                      'application/json': |
                        #set($inputRoot = $input.path('$'))
                        $inputRoot.body
              tags:
                - "advertisement"
              description: "CRUD for store item"
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                '200':
                  description: resource
                  schema:
                    type: object
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: aws
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerWeb.Arn}/invocations'
                requestTemplates:
                  application/json: |
                    #set($allParams = $input.params())
                    {
                    "body-json" : $input.json('$'),
                    "params" : {
                    #foreach($type in $allParams.keySet())
                        #set($params = $allParams.get($type))
                    "$type" : {
                        #foreach($paramName in $params.keySet())
                        "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                            #if($foreach.hasNext),#end
                        #end
                    }
                        #if($foreach.hasNext),#end
                    #end
                    },
                    "stage-variables" : {
                    #foreach($key in $stageVariables.keySet())
                    "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                        #if($foreach.hasNext),#end
                    #end
                    },
                    "resource" : "$context.resourcePath",
                    "path" : "$context.resourcePath",
                    "httpMethod" : "$context.httpMethod"
                    }
                responses:
                  default:
                    statusCode: 200
                    #responseParameters:
                    #method.response.header.Access-Control-Allow-Origin: "'*'"
                    #method.response.header.Content-Type: "'text/html'"
                    responseTemplates:
                      'application/json': |
                        #set($inputRoot = $input.path('$'))
                        $inputRoot.body
              tags:
                - "advertisement"
              description: "CRUD for store item"
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                '200':
                  description: resource
                  schema:
                    type: object
          /css/{file_name}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: WHEN_NO_MATCH
                type: aws
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerWeb.Arn}/invocations'
                requestTemplates:
                  application/json: |
                    #set($allParams = $input.params())
                    {
                    "body-json" : $input.json('$'),
                    "params" : {
                    #foreach($type in $allParams.keySet())
                        #set($params = $allParams.get($type))
                    "$type" : {
                        #foreach($paramName in $params.keySet())
                        "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                            #if($foreach.hasNext),#end
                        #end
                    }
                        #if($foreach.hasNext),#end
                    #end
                    },
                    "stage-variables" : {
                    #foreach($key in $stageVariables.keySet())
                    "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                        #if($foreach.hasNext),#end
                    #end
                    },
                    "resource" : "$context.resourcePath",
                    "path" : "$context.resourcePath",
                    "httpMethod" : "$context.httpMethod"
                    }
                responses:
                  default:
                    statusCode: 200
                    #responseParameters:
                    #method.response.header.Access-Control-Allow-Origin: "'*'"
                    #method.response.header.Content-Type: "'text/html'"
                    responseTemplates:
                      'text/css': |
                        #set($inputRoot = $input.path('$'))
                        $inputRoot.body

              tags:
                - "web-index"
              description: "Index for web"
              produces:
                - "text/css"
              responses:
                '200':
                  description: resource
                  schema:
                    type: object
          /js/{file_name}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: WHEN_NO_MATCH
                type: aws
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerWeb.Arn}/invocations'
                requestTemplates:
                  application/json: |
                    #set($allParams = $input.params())
                    {
                    "body-json" : $input.json('$'),
                    "params" : {
                    #foreach($type in $allParams.keySet())
                        #set($params = $allParams.get($type))
                    "$type" : {
                        #foreach($paramName in $params.keySet())
                        "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                            #if($foreach.hasNext),#end
                        #end
                    }
                        #if($foreach.hasNext),#end
                    #end
                    },
                    "stage-variables" : {
                    #foreach($key in $stageVariables.keySet())
                    "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                        #if($foreach.hasNext),#end
                    #end
                    },
                    "resource" : "$context.resourcePath",
                    "path" : "$context.resourcePath",
                    "httpMethod" : "$context.httpMethod"
                    }
                responses:
                  default:
                    statusCode: 200
                    #responseParameters:
                    #method.response.header.Access-Control-Allow-Origin: "'*'"
                    #method.response.header.Content-Type: "'text/html'"
                    responseTemplates:
                      'text/javascript': |
                        #set($inputRoot = $input.path('$'))
                        $inputRoot.body

              tags:
                - "web-index"
              description: "Index for web"
              produces:
                - "text/javascript"
              responses:
                '200':
                  description: resource
                  schema:
                    type: object
          /img/{store_item_id}/{file_name}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: WHEN_NO_MATCH
                type: aws
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerWeb.Arn}/invocations'
                requestTemplates:
                  application/json: |
                    #set($allParams = $input.params())
                    {
                    "body-json" : $input.json('$'),
                    "params" : {
                    #foreach($type in $allParams.keySet())
                        #set($params = $allParams.get($type))
                    "$type" : {
                        #foreach($paramName in $params.keySet())
                        "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                            #if($foreach.hasNext),#end
                        #end
                    }
                        #if($foreach.hasNext),#end
                    #end
                    },
                    "stage-variables" : {
                    #foreach($key in $stageVariables.keySet())
                    "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                        #if($foreach.hasNext),#end
                    #end
                    },
                    "resource" : "$context.resourcePath",
                    "path" : "$context.resourcePath",
                    "httpMethod" : "$context.httpMethod"
                    }
                responses:
                  default:
                    statusCode: 302
                    responseParameters:
                      method.response.header.Location: "integration.response.body.body"


              tags:
                - "web-image"
              description: "images"
              produces:
                - "image/jpg"
              responses:
                '302':
                  description: resource
                  headers:
                    Location:
                      type: "string"

          /file/presigned_upload_link/{file_name}:
             get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: AWS_PROXY
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerWeb.Arn}/invocations'
                requestTemplates:
                  application/json: |
                    #set($allParams = $input.params())
                    {
                    "body-json" : $input.json('$'),
                    "params" : {
                    #foreach($type in $allParams.keySet())
                        #set($params = $allParams.get($type))
                    "$type" : {
                        #foreach($paramName in $params.keySet())
                        "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                            #if($foreach.hasNext),#end
                        #end
                    }
                        #if($foreach.hasNext),#end
                    #end
                    },
                    "stage-variables" : {
                    #foreach($key in $stageVariables.keySet())
                    "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                        #if($foreach.hasNext),#end
                    #end
                    },
                    "resource" : "$context.resourcePath",
                    "path" : "$context.resourcePath",
                    "httpMethod" : "$context.httpMethod"
                    }
              tags:
                - "file"
                - "presigned_upload_link"
              description: "Presigned upload link for file"
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                '200':
                  description: resource
                  schema:
                    type: object
          /file/upload:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: aws
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerWeb.Arn}/invocations'
                requestTemplates:
                  multipart/form-data: |
                    #set($allParams = $input.params())
                    {
                    "body-json" : $input.json('$'),
                    "params" : {
                    #foreach($type in $allParams.keySet())
                        #set($params = $allParams.get($type))
                    "$type" : {
                        #foreach($paramName in $params.keySet())
                        "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                            #if($foreach.hasNext),#end
                        #end
                    }
                        #if($foreach.hasNext),#end
                    #end
                    },
                    "stage-variables" : {
                    #foreach($key in $stageVariables.keySet())
                    "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                        #if($foreach.hasNext),#end
                    #end
                    },
                    "resource" : "$context.resourcePath",
                    "path" : "$context.resourcePath",
                    "httpMethod" : "$context.httpMethod"
                    }
              tags:
                - "file"
                - "presigned_upload_link"
              description: "Upload link for file"
              consumes:
                - "application/image"
              produces:
                - "application/json"
              responses:
                '200':
                  description: resource
                  schema:
                    type: object
          /file/upload/{store_item_id}:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: aws
                uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerWeb.Arn}/invocations'
                requestTemplates:
                  multipart/form-data: |
                    #set($allParams = $input.params())
                    {
                    "body-json" : $input.json('$'),
                    "params" : {
                    #foreach($type in $allParams.keySet())
                        #set($params = $allParams.get($type))
                    "$type" : {
                        #foreach($paramName in $params.keySet())
                        "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                            #if($foreach.hasNext),#end
                        #end
                    }
                        #if($foreach.hasNext),#end
                    #end
                    },
                    "stage-variables" : {
                    #foreach($key in $stageVariables.keySet())
                    "$key" : "$util.escapeJavaScript($stageVariables.get($key))"
                        #if($foreach.hasNext),#end
                    #end
                    },
                    "resource" : "$context.resourcePath",
                    "path" : "$context.resourcePath",
                    "httpMethod" : "$context.httpMethod"
                    }
              tags:
                - "file"
                - "presigned_upload_link"
              description: "Upload link for file"
              consumes:
                - "application/image"
                - "multipart/form-data"
              produces:
                - "application/json"
              responses:
                '200':
                  description: resource
                  schema:
                    type: object
      EndpointConfiguration:
        Types:
          - EDGE
      Name: bazar-web

  ConfigAPILambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - ApiGatewayAdvertisementRestApi
    - BazaarServerApp
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BazaarServerApp
      Principal: apigateway.amazonaws.com

  ConfigWebLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
      - WebGatewayAdvertisementRestApi
      - BazaarServerWeb
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BazaarServerWeb
      Principal: apigateway.amazonaws.com


  WebApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - WebGatewayAdvertisementRestApi
    Properties:
      RestApiId: !Ref WebGatewayAdvertisementRestApi
      StageName: "v0"

  RestApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiGatewayAdvertisementRestApi
    Properties:
      RestApiId: !Ref ApiGatewayAdvertisementRestApi
      StageName: "v0"



#  ApiGatewayStoreItemRestApi:
#    Type: AWS::ApiGateway::RestApi
#    Properties:
#      ApiKeySourceType: HEADER
#      Description: An API Gateway with a Lambda Integration
#      EndpointConfiguration:
#        Types:
#          - EDGE
#      Name: store-item-api
#
#  ApiGatewayWebAppHttpApi:
#    Type: AWS::ApiGateway::RestApi
#    Properties:
#      ApiKeySourceType: HEADER
#      Description: An API Gateway with a Lambda Integration
#      Body:
#        swagger: 2.0
#        info:
#          version: 0.0.1
#          title: Web
#        basePath: /web
#        schemes:
#          - https
#        definitions:
#          Empty:
#            type: object
#      EndpointConfiguration:
#        Types:
#          - EDGE
#      Name: web-app
#
#  ApiGatewayWebIndexResource:
#    Type: AWS::ApiGateway::Resource
#    Properties:
#      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
#      PathPart: 'web'
#      RestApiId: !Ref ApiGatewayRestApi
#
#  ApiGatewayAdvertisementResource:
#    Type: AWS::ApiGateway::Resource
#    Properties:
#      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
#      PathPart: 'advertisement'
#      RestApiId: !Ref ApiGatewayRestApi
#
#  ApiGatewayStoreItemResource:
#    Type: AWS::ApiGateway::Resource
#    Properties:
#      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
#      PathPart: 'storeItem'
#      RestApiId: !Ref ApiGatewayRestApi
#
#  ApiGatewayStoreItemIdResource:
#    Type: AWS::ApiGateway::Resource
#    Properties:
#      ParentId: !Ref ApiGatewayStoreItemResource
#      PathPart: '{id}'
#      RestApiId: !Ref ApiGatewayRestApi
#
#  ApiGatewayAdvertisementIdResource:
#    Type: AWS::ApiGateway::Resource
#    Properties:
#      ParentId: !Ref ApiGatewayAdvertisementResource
#      PathPart: '{id}'
#      RestApiId: !Ref ApiGatewayRestApi
#
#  ApiGatewayAdvertisimentsAnalyticsResource:
#    Type: AWS::ApiGateway::Resource
#    Properties:
#      ParentId: !Ref ApiGatewayAdvertisementResource
#      PathPart: 'analytics'
#      RestApiId: !Ref ApiGatewayRestApi
#
#  ApiGatewayAdvertisementMethodPost:
#    Type: AWS::ApiGateway::Method
#    Properties:
#      ApiKeyRequired: false
#      AuthorizationType: NONE
#      HttpMethod: POST
#      Integration:
#        ConnectionType: INTERNET
#        Credentials: !GetAtt ApiGatewayIamRole.Arn
#        IntegrationHttpMethod: POST
#        PassthroughBehavior: WHEN_NO_MATCH
#        TimeoutInMillis: 29000
#        Type: AWS_PROXY
#        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerApp.Arn}/invocations'
#      OperationName: 'lambda'
#      ResourceId: !Ref ApiGatewayAdvertisementResource
#      RestApiId: !Ref ApiGatewayAdvertisementRestApi
#
#  ApiGatewayAdvertisementMethodGetStore:
#    Type: AWS::ApiGateway::Method
#    Properties:
#      ApiKeyRequired: false
#      AuthorizationType: NONE
#      HttpMethod: GET
#      Integration:
#        ConnectionType: INTERNET
#        Credentials: !GetAtt ApiGatewayIamRole.Arn
#        IntegrationHttpMethod: POST
#        PassthroughBehavior: WHEN_NO_MATCH
#        TimeoutInMillis: 29000
#        Type: AWS_PROXY
#        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerApp.Arn}/invocations'
#      OperationName: 'lambda'
#      ResourceId: !Ref ApiGatewayStoreItemResource
#      RestApiId: !Ref ApiGatewayAdvertisementRestApi
#
#  ApiGatewayAdvertisementMethodGetId:
#    Type: AWS::ApiGateway::Method
#    Properties:
#      ApiKeyRequired: false
#      AuthorizationType: NONE
#      HttpMethod: GET
#      Integration:
#        ConnectionType: INTERNET
#        Credentials: !GetAtt ApiGatewayIamRole.Arn
#        IntegrationHttpMethod: POST
#        PassthroughBehavior: WHEN_NO_MATCH
#        TimeoutInMillis: 29000
#        Type: AWS_PROXY
#        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerApp.Arn}/invocations'
#      OperationName: 'lambda'
#      ResourceId: !Ref ApiGatewayStoreItemIdResource
#      RestApiId: !Ref ApiGatewayAdvertisementRestApi
#
#  ApiGatewayStoreItemMethodPost:
#    Type: AWS::ApiGateway::Method
#    Properties:
#      ApiKeyRequired: false
#      AuthorizationType: NONE
#      HttpMethod: POST
#      Integration:
#        ConnectionType: INTERNET
#        Credentials: !GetAtt ApiGatewayIamRole.Arn
#        IntegrationHttpMethod: POST
#        PassthroughBehavior: WHEN_NO_MATCH
#        TimeoutInMillis: 29000
#        Type: AWS_PROXY
#        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerApp.Arn}/invocations'
#      OperationName: 'lambda'
#      ResourceId: !Ref ApiGatewayAdvertisementResource
#      RestApiId: !Ref ApiGatewayStoreItemRestApi
#
#  ApiGatewayStoreItemMethodGetStore:
#    Type: AWS::ApiGateway::Method
#    Properties:
#      ApiKeyRequired: false
#      AuthorizationType: NONE
#      HttpMethod: GET
#      Integration:
#        ConnectionType: INTERNET
#        Credentials: !GetAtt ApiGatewayIamRole.Arn
#        IntegrationHttpMethod: POST
#        PassthroughBehavior: WHEN_NO_MATCH
#        TimeoutInMillis: 29000
#        Type: AWS_PROXY
#        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerApp.Arn}/invocations'
#      OperationName: 'lambda'
#      ResourceId: !Ref ApiGatewayStoreItemResource
#      RestApiId: !Ref ApiGatewayStoreItemRestApi
#
#  ApiGatewayStoreItemMethodGetId:
#    Type: AWS::ApiGateway::Method
#    Properties:
#      ApiKeyRequired: false
#      AuthorizationType: NONE
#      HttpMethod: GET
#      Integration:
#        ConnectionType: INTERNET
#        Credentials: !GetAtt ApiGatewayIamRole.Arn
#        IntegrationHttpMethod: POST
#        PassthroughBehavior: WHEN_NO_MATCH
#        TimeoutInMillis: 29000
#        Type: AWS_PROXY
#        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerApp.Arn}/invocations'
#      OperationName: 'lambda'
#      ResourceId: !Ref ApiGatewayStoreItemIdResource
#      RestApiId: !Ref ApiGatewayStoreItemRestApi
#
#  ApiGatewayAdvertisementMethodGetAnalytics:
#    Type: AWS::ApiGateway::Method
#    Properties:
#      ApiKeyRequired: false
#      AuthorizationType: NONE
#      HttpMethod: GET
#      Integration:
#        ConnectionType: INTERNET
#        Credentials: !GetAtt ApiGatewayIamRole.Arn
#        IntegrationHttpMethod: POST
#        PassthroughBehavior: WHEN_NO_MATCH
#        TimeoutInMillis: 29000
#        Type: AWS_PROXY
#        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerApp.Arn}/invocations'
#      OperationName: 'lambda'
#      ResourceId: !Ref ApiGatewayAdvertisimentsAnalyticsResource
#      RestApiId: !Ref ApiGatewayAdvertisementRestApi
#
#  ApiGatewayAdvertisementMethodIndex:
#    Type: AWS::ApiGateway::Method
#    Properties:
#      ApiKeyRequired: false
#      AuthorizationType: NONE
#      HttpMethod: GET
#      Integration:
#        ConnectionType: INTERNET
#        Credentials: !GetAtt ApiGatewayIamRole.Arn
#        IntegrationHttpMethod: POST
#        PassthroughBehavior: WHEN_NO_MATCH
#        TimeoutInMillis: 29000
#        Type: AWS_PROXY
#        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BazaarServerWeb.Arn}/invocations'
#      OperationName: 'lambda'
#      ResourceId: !Ref ApiGatewayWebIndexResource
#      RestApiId: !Ref ApiGatewayAdvertisementRestApi
#
#  ApiGatewayModel:
#    Type: AWS::ApiGateway::Model
#    Properties:
#      ContentType: 'application/json'
#      RestApiId: !Ref ApiGatewayAdvertisementRestApi
#      Schema: {}
#
#  ApiGatewayStage:
#    Type: AWS::ApiGateway::Stage
#    Properties:
#      DeploymentId: !Ref ApiGatewayDeployment
#      Description: Lambda API Stage v0
#      RestApiId: !Ref ApiGatewayAdvertisementRestApi
#      StageName: 'v0'
#
#  ApiGatewayDeployment:
#    Type: AWS::ApiGateway::Deployment
#    DependsOn:
#      - ApiGatewayAdvertisementMethodPost
#      - ApiGatewayAdvertisementWebIndexResource
#      - ApiGatewayAdvertisementMethodGetStore
#    Properties:
#      Description: Lambda API Deployment
#      RestApiId: !Ref ApiGatewayAdvertisementRestApi

  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: ''
            Effect: 'Allow'
            Principal:
              Service:
                - 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 'lambda:*'
                Resource:
                  - !GetAtt BazaarServerApp.Arn
                  - !GetAtt BazaarServerWeb.Arn
#
#  LambdaFunction:
#    Type: AWS::Lambda::Function
#    Properties:
#      Description: AWS Lambda function
#      FunctionName: 'lambda-function'
#      Handler: 'src.server.handle'
#      Code:
#        S3Bucket: 'bazaar-app-lambda'
#        S3Key: 'output.zip'
#      MemorySize: 256
#      Role: !GetAtt LambdaIamRole.Arn
#      Runtime: python3.8
#      Timeout: 60
#
#  LambdaIamRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: '2012-10-17'
#        Statement:
#          - Effect: 'Allow'
#            Principal:
#              Service:
#                - 'lambda.amazonaws.com'
#            Action:
#              - 'sts:AssumeRole'
#      Path: '/'

  BazaarServerWeb:
    DependsOn:
      - PhotoS3Bucket
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      CodeUri:
        Bucket: 'bazaar-app-lambda'
        Key: !Sub 'output.zip'
      Handler: src.web_server.handle
      MemorySize: 256
      Environment:
        Variables:
          PhotoBucket : !Ref PhotoS3Bucket
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:*
              Resource:
                - !Sub 'arn:aws:s3:::${PhotoS3Bucket}'
                - !Sub 'arn:aws:s3:::${PhotoS3Bucket}/*'



  BazaarServerApp:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.8
      CodeUri:
        Bucket: 'bazaar-app-lambda'
        Key: !Sub 'output.zip'
      Handler: src.server.handle_crud
      MemorySize: 256
      Environment:
        Variables:
          StoreItemTable : !Ref StoreItemTable
          PhotoBucket: !Ref PhotoS3Bucket
          AdvertisementTable : ""
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource:
                - !Sub "${StoreItemTable.Arn}"
                - !Sub "${StoreItemTable.Arn}/index/*"
            - Effect: Allow
              Action:
                - s3:*
              Resource:
                - !Sub 'arn:aws:s3:::${PhotoS3Bucket}'
                - !Sub 'arn:aws:s3:::${PhotoS3Bucket}/*'

  StoreItemTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: !Sub 'store_items_v1_${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: S
      KeySchema:
        - AttributeName: "id"
          KeyType: HASH
